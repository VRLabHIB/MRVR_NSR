t
library(psych)
library(dplyr)
t <- results$ttest
t <- t %>%
mutate_if(is.numeric, round, digits = 3)
t
t <- results$ttest$asDF
t <- t %>%
mutate_if(is.numeric, round, digits = 3)
t
t[:,:11]
t[,c(:11)]
t[,c(0:11)]
t[,c(11:23)]
t[,c(12:23)]
t[,c(0:12)]
t[,c(13:23)]
results$norm
View(dfww)
results <- ttestPS(
data = dfww,
pairs = list(
list(
i1 = 'Mean.fixation.duration.2',
i2 = 'Mean.fixation.duration.3')),
wilcoxon = TRUE,
meanDiff = TRUE,
effectSize = TRUE,
ci = TRUE,
desc = TRUE,
norm = TRUE)
t <- results$ttest$asDF
t <- t %>%
mutate_if(is.numeric, round, digits = 3)
t[,c(0:12)]
t[,c(13:23)]
t[,c(2:12)]
t[,c(15:23)]
0
t[,c(13:23)]
results$ttest
results <- ttestPS(
data = dfww,
pairs = list(
list(
i1 = 'Mean.regressive.fixation.duration.2',
i2 = 'Mean.regressive.fixation.duration.3')),
wilcoxon = TRUE,
meanDiff = TRUE,
effectSize = TRUE,
ci = TRUE,
desc = TRUE,
norm = TRUE)
results$ttest
t <- results$ttest$asDF
t <- t %>%
mutate_if(is.numeric, round, digits = 3)
t[,c(0:12)]
t[,c(13:23)]
View(t)
t <- results$ttest$asDF
View(t)
results <- ttestPS(
data = dfww,
pairs = list(
list(
i1 = 'Equal.fixation.duration.between.figures.2',
i2 = 'Equal.fixation.duration.between.figures.3')),
wilcoxon = TRUE,
meanDiff = TRUE,
effectSize = TRUE,
ci = TRUE,
desc = TRUE,
norm = TRUE)
results$ttest
t <- results$ttest$asDF
t <- t %>%
mutate_if(is.numeric, round, digits = 3)
t[,c(0:12)]
t[,c(13:23)]
results <- ttestPS(
data = dfww,
pairs = list(
list(
i1 = 'Equal.fixation.duration.within.figure.2',
i2 = 'Equal.fixation.duration.within.figure.3')),
wilcoxon = TRUE,
meanDiff = TRUE,
effectSize = TRUE,
ci = TRUE,
desc = TRUE,
norm = TRUE)
results$ttest
t <- results$ttest$asDF
t <- t %>%
mutate_if(is.numeric, round, digits = 3)
t[,c(0:12)]
t[,c(13:23)]
View(t)
t <- results$ttest$asDF
View(t)
results <- ttestPS(
data = dfww,
pairs = list(
list(
i1 = 'Strategy.ratio.2',
i2 = 'Strategy.ratio.3')),
wilcoxon = TRUE,
meanDiff = TRUE,
effectSize = TRUE,
ci = TRUE,
desc = TRUE,
norm = TRUE)
results$ttest
t <- results$ttest$asDF
View(t)
t <- t %>%
mutate_if(is.numeric, round, digits = 3)
t[,c(0:12)]
t[,c(13:23)]
results$norm
results <- ttestPS(
data = dfww,
pairs = list(
list(
i1 = 'Mean.saccade.duration.2',
i2 = 'Mean.saccade.duration.3')),
wilcoxon = TRUE,
meanDiff = TRUE,
effectSize = TRUE,
ci = TRUE,
desc = TRUE,
norm = TRUE)
results$ttest
t <- results$ttest$asDF
t <- t %>%
mutate_if(is.numeric, round, digits = 3)
t[,c(0:12)]
t[,c(13:23)]
results <- ttestPS(
data = dfww,
pairs = list(
list(
i1 = 'Mean.saccade.velocity.2',
i2 = 'Mean.saccade.velocity.3')),
wilcoxon = TRUE,
meanDiff = TRUE,
effectSize = TRUE,
ci = TRUE,
desc = TRUE,
norm = TRUE)
results$ttest
t <- results$ttest$asDF
View(t)
t <- t %>%
mutate_if(is.numeric, round, digits = 3)
t[,c(0:12)]
t[,c(13:23)]
results <- ttestPS(
data = dfww,
pairs = list(
list(
i1 = 'Mean.pupil.diameter.2',
i2 = 'Mean.pupil.diameter.3')),
wilcoxon = TRUE,
meanDiff = TRUE,
effectSize = TRUE,
ci = TRUE,
desc = TRUE,
norm = TRUE)
results$ttest
t <- results$ttest$asDF
View(t)
t <- t %>%
mutate_if(is.numeric, round, digits = 3)
t[,c(0:12)]
t[,c(13:23)]
results <- ttestPS(
data = dfww,
pairs = list(
list(
i1 = 'Pupil.diameter.amplitude.2',
i2 = 'Pupil.diameter.amplitude.3')),
wilcoxon = TRUE,
meanDiff = TRUE,
effectSize = TRUE,
ci = TRUE,
desc = TRUE,
norm = TRUE)
results$ttest
t <- results$ttest$asDF
View(t)
t <- t %>%
mutate_if(is.numeric, round, digits = 3)
t[,c(0:12)]
t[,c(13:23)]
results <- ttestPS(
data = dfww,
pairs = list(
list(
i1 = 'Mean.head.rotation.2',
i2 = 'Mean.head.rotation.3')),
wilcoxon = TRUE,
meanDiff = TRUE,
effectSize = TRUE,
ci = TRUE,
desc = TRUE,
norm = TRUE)
results$ttest
t <- results$ttest$asDF
View(t)
t <- t %>%
mutate_if(is.numeric, round, digits = 3)
t[,c(0:12)]
t[,c(13:23)]
results <- ttestPS(
data = dfww,
pairs = list(
list(
i1 = 'Mean.head.movement.2',
i2 = 'Mean.head.movement.3')),
wilcoxon = TRUE,
meanDiff = TRUE,
effectSize = TRUE,
ci = TRUE,
desc = TRUE,
norm = TRUE)
results$ttest
t <- results$ttest$asDF
View(t)
t <- t %>%
mutate_if(is.numeric, round, digits = 3)
t[,c(0:12)]
t[,c(13:23)]
install.packages("installr")
library(installr)
updateR()
updateR()
project_path = dirname(rstudioapi::getSourceEditorContext()$path)
# Load the original datafile and preprocess it
start_time <- Sys.time()
df <- read.csv(paste0(data_path, "final_A116.csv"))
# select subset
dfs <- df[c("real_time", "object", "left.pupil_diameter_mm", "right.pupil_diameter_mm")]
dfs <- dfs[!(dfs$left.pupil_diameter_mm==-1 | dfs$right.pupil_diameter_mm==-1),]
dfs <- dfs[complete.cases(dfs),]
colnames(dfs) <- c('time', 'gaze_target', 'left.pupil_diameter_mm', 'right.pupil_diameter_mm')
write.csv(dfs, paste0(data_path, "smaller_subset_R.csv"))
deltatime <- Sys.time() - start_time
data_path <- paste0(project_path, '/data/')
# Load the original datafile and preprocess it
start_time <- Sys.time()
df <- read.csv(paste0(data_path, "final_A116.csv"))
# select subset
dfs <- df[c("real_time", "object", "left.pupil_diameter_mm", "right.pupil_diameter_mm")]
dfs <- dfs[!(dfs$left.pupil_diameter_mm==-1 | dfs$right.pupil_diameter_mm==-1),]
dfs <- dfs[complete.cases(dfs),]
colnames(dfs) <- c('time', 'gaze_target', 'left.pupil_diameter_mm', 'right.pupil_diameter_mm')
write.csv(dfs, paste0(data_path, "smaller_subset_R.csv"))
deltatime <- Sys.time() - start_time
deltatime
start_time <- Sys.time()
df <- read.csv(paste0(data_path, "final_A116.csv"))
# select subset
dfs <- df[c("real_time", "object", "left.pupil_diameter_mm", "right.pupil_diameter_mm")]
dfs <- dfs[!(dfs$left.pupil_diameter_mm==-1 | dfs$right.pupil_diameter_mm==-1),]
dfs <- dfs[complete.cases(dfs),]
colnames(dfs) <- c('time', 'gaze_target', 'left.pupil_diameter_mm', 'right.pupil_diameter_mm')
write.csv(dfs, paste0(data_path, "smaller_subset_R.csv"))
deltatime <- Sys.time() - start_time
deltatime
start_time <- Sys.time()
df <- read.csv(paste0(data_path, "smaller_subset_R.csv"))
ID <- "001"
ID_lst_new <- vector()
source_lst <- vector()
target_lst <- vector()
time_lst <- vector()
trans_time_lst <- vector()
source <- df$gaze_target[1]
for (i in 2:nrow(df)) {
if (source != df$gaze_target[i]) {
ID_lst_new <- c(ID_lst_new, ID)
time_lst <- c(time_lst, df$time[i - 1])
trans_time_lst <- c(trans_time_lst, df$time[i] - df$time[i - 1])
source_lst <- c(source_lst, source)
target_lst <- c(target_lst, df$gaze_target[i])
source <- df$gaze_target[i]
}
}
df_trans <- data.frame(participant = ID_lst_new, time_point = time_lst, trans_dur = trans_time_lst,
Source = source_lst, Target = target_lst)
write.csv(df_trans, paste0(data_path, "transition_R.csv"))
deltatime <- Sys.time() - start_time
deltatime
View(df_trans)
start_time <- Sys.time()
for (i in (1:100)){
df <- read.csv(paste0(data_path, "smaller_subset_R.csv"))
ID <- "001"
ID_lst_new <- vector()
source_lst <- vector()
target_lst <- vector()
time_lst <- vector()
trans_time_lst <- vector()
source <- df$gaze_target[1]
for (i in 2:nrow(df)) {
if (source != df$gaze_target[i]) {
ID_lst_new <- c(ID_lst_new, ID)
time_lst <- c(time_lst, df$time[i - 1])
trans_time_lst <- c(trans_time_lst, df$time[i] - df$time[i - 1])
source_lst <- c(source_lst, source)
target_lst <- c(target_lst, df$gaze_target[i])
source <- df$gaze_target[i]
}
}
df_trans <- data.frame(participant = ID_lst_new, time_point = time_lst, trans_dur = trans_time_lst,
Source = source_lst, Target = target_lst)
write.csv(df_trans, paste0(data_path, "transition_R.csv"))}
deltatime <- Sys.time() - start_time
deltatime
0.51*100
start_time <- Sys.time()
for (i in (1:2)){
df <- read.csv(paste0(data_path, "smaller_subset_R.csv"))
ID <- "001"
ID_lst_new <- vector()
source_lst <- vector()
target_lst <- vector()
time_lst <- vector()
trans_time_lst <- vector()
source <- df$gaze_target[1]
for (i in 2:nrow(df)) {
if (source != df$gaze_target[i]) {
ID_lst_new <- c(ID_lst_new, ID)
time_lst <- c(time_lst, df$time[i - 1])
trans_time_lst <- c(trans_time_lst, df$time[i] - df$time[i - 1])
source_lst <- c(source_lst, source)
target_lst <- c(target_lst, df$gaze_target[i])
source <- df$gaze_target[i]
}
}
df_trans <- data.frame(participant = ID_lst_new, time_point = time_lst, trans_dur = trans_time_lst,
Source = source_lst, Target = target_lst)
write.csv(df_trans, paste0(data_path, "transition_R.csv"))}
deltatime <- Sys.time() - start_time
deltatime
df_trans <- read.csv(paste0(data_path, "transition_R.csv"))
# Create adjecency dataset
library(dplyr)
df_adj <- df_trans%>% group_by(Source)
View(df_adj)
View(df_trans)
df_trans <- read.csv(paste0(data_path, "transition_R.csv"),row.names=1)
View(df_trans)
df_trans$weight <- 1
View(df_trans)
df_adj <- df_trans %>% group_by(Source)
View(df_adj)
df_adj <- df_trans %>% group_by(Source) %>% tally()
View(df_adj)
df_adj <- df_trans %>% group_by(Source, Target) %>% tally()
View(df_adj)
df_adj$ID <-df_trans$participant[0]
df_trans$participant[0]
df_trans$participant[[0]]
df_adj$ID <-df_trans$participant[1]
View(df_adj)
colnames(df_adj)[3] <- "Weight"
View(df_adj)
start_time <- Sys.time()
df_trans <- read.csv(paste0(data_path, "transition_R.csv"),row.names=1)
df_trans$weight <- 1
df_adj <- df_trans %>% group_by(Source, Target) %>% tally()
df_adj$ID <-df_trans$participant[1]
colnames(df_adj)[3] <- "Weight"
write.csv(df_adj, paste0(data_path, "adj_R.csv"))
deltatime <- Sys.time() - start_time
deltatime
View(df_adj)
library(igraph)
graph_from_biadjacency_matrix(df_adj)
library(igraph)
graph_from_biadjacency_matrix(df_adj)
g <- graph_from_biadjacency_matrix(df_adj)
g <- graph_from_adjacency_matrix(df_adj)
colnames(df_adj)[3] <- "weight"
write.csv(df_adj, paste0(data_path, "adj_R.csv"))
df_adj <- read.csv(paste0(data_path, "adj_R.csv"),row.names=1)
g <- graph.adjacency(df_adj, weighted = TRUE)
df_adj$ID <- NULL
g <- graph.adjacency(df_adj, weighted = TRUE)
edges <- df_trans
edges <- df_trans
edges$participant <- NULL
edges$time_point <- NULL
edges$trans_dur <- NULL
edges$weight <- NULL
mat <- as.matrix(get.adjacency(graph.data.frame(edges)))
View(mat)
g <- graph_from_adjacency_matrix(mat)
View(g)
g <- graph_from_adjacency_matrix(mat, mode="directed")
View(mat)
g <- graph_from_adjacency_matrix(mat, mode="directed")
library(igraph)
g <- graph_from_adjacency_matrix(mat, mode="directed")
colnames(mat)
g <- graph_from_adjacency_matrix(mat, mode="directed", add.colnames=colnames(mat),
add.rownames = rownames(mat))
g <- graph_from_adjacency_matrix(mat, mode="directed", add.rownames = rownames(mat))
g <- graph_from_adjacency_matrix(mat, mode="directed",weighted = TRUE)
View(g)
plot(g)
df_trans <- read.csv(paste0(data_path, "transition_R.csv")), row.names=1)
df_trans <- read.csv(paste0(data_path, "transition_R.csv")), rownames=1)
df_trans <- read.csv(paste0(data_path, "transition_R.csv")))
df_trans <- read.csv(paste0(data_path, "transition_R.csv"))
View(df_trans)
df_trans <- read.csv(paste0(data_path, "transition_R.csv"), row.names=1)
# Transform tansition datat directly into graph
library(igraph)
# Transform tansition datat directly into graph
library(igraph)
start_time <- Sys.time()
df_trans <- read.csv(paste0(data_path, "transition_R.csv"), row.names=1)
edges <- df_trans
edges$participant <- NULL
edges$time_point <- NULL
edges$trans_dur <- NULL
edges$weight <- NULL
mat <- as.matrix(get.adjacency(graph.data.frame(edges)))
# Create graph
g <- graph_from_adjacency_matrix(mat, mode="directed",weighted = TRUE)
deltatime <- Sys.time() - start_time
deltatime
mat
start_time <- Sys.time()
df_trans <- read.csv(paste0(data_path, "transition_R.csv"), row.names=1)
edges <- df_trans
edges$participant <- NULL
edges$time_point <- NULL
edges$trans_dur <- NULL
edges$weight <- NULL
mat <- as.matrix(get.adjacency(graph.data.frame(edges)))
df_trans <- read.csv(paste0(data_path, "transition_R.csv"), row.names=1)
edges <- df_trans
project_path = dirname(rstudioapi::getSourceEditorContext()$path)
start_time <- Sys.time()
df_trans <- read.csv(paste0(data_path, "transition_R.csv"), row.names=1)
edges <- df_trans
edges$participant <- NULL
edges$time_point <- NULL
edges$trans_dur <- NULL
edges$weight <- NULL
mat <- as.matrix(get.adjacency(graph.data.frame(edges)))
# Create graph
g <- graph_from_adjacency_matrix(mat, mode="directed",weighted = TRUE)
deltatime <- Sys.time() - start_time
df_trans <- read.csv(paste0(data_path, "transition_R.csv"), row.names=1)
data_path <- paste0(project_path, '/data/')
start_time <- Sys.time()
df_trans <- read.csv(paste0(data_path, "transition_R.csv"), row.names=1)
edges <- df_trans
edges$participant <- NULL
edges$time_point <- NULL
edges$trans_dur <- NULL
edges$weight <- NULL
mat <- as.matrix(get.adjacency(graph.data.frame(edges)))
# Create graph
g <- graph_from_adjacency_matrix(mat, mode="directed",weighted = TRUE)
deltatime <- Sys.time() - start_time
deltatime
df <- read.csv("2023-06-17_feature_dataset_agg.csv")
setwd("C:\\Users\\Stark\\Documents\\Promotion\\_Mental_Rotation\\03_MR_in_VR\\MRVR_NSR\\data\\6_feature_dataset\\")
df <- read.csv("2023-06-17_feature_dataset_agg.csv")
View(df)
View(df)
dfw <- reshape(dat1, idvar = "ID", timevar = "dimension", direction = "wide")
dfw <- reshape(df, idvar = "ID", timevar = "dimension", direction = "wide")
View(dfw)
result = wilcox.test(dfw$Equal.fixation.duration.within.figure.2, dfw$Equal.fixation.duration.within.figure.3, paired = TRUE)
summary(result)
View(dfw)
dfw$Equal.fixation.duration.within.figure.2
dfw$Equal.fixation.duration.within.figure.3
print(result)
median(dfw$Equal.fixation.duration.within.figure.2)-median(dfw$Equal.fixation.duration.within.figure.3)
median(dfw$Equal.fixation.duration.within.figure.2-dfw$Equal.fixation.duration.within.figure.3)
diff <- dfw$Equal.fixation.duration.within.figure.2-dfw$Equal.fixation.duration.within.figure.3
library("plotrix")
install.packages(plotrix)
install.packages("plotrix")
library("plotrix")
print(std.error(diff))
print(median(diff))
mean(dfw$Equal.fixation.duration.within.figure.2)
rb <- rank_biserial(Pair(Equal.fixation.duration.within.figure.2, Equal.fixation.duration.within.figure.3) ~ 1, data = dfw)
library(rank_diff)
install.packages("rank_diff")
install.packages("effectsize")
library(effectsize)
rb <- rank_biserial(Pair(Equal.fixation.duration.within.figure.2, Equal.fixation.duration.within.figure.3) ~ 1, data = dfw)
View(rb)
ci_median_diff(diff)
install.packages("confintr")
ci_median_diff(dfw$Equal.fixation.duration.within.figure.2,dfw$Equal.fixation.duration.within.figure.3)
library(confintr)
ci_median_diff(dfw$Equal.fixation.duration.within.figure.2,dfw$Equal.fixation.duration.within.figure.3)
View(df)
colnames(df)
